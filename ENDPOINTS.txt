SWAGGER: /swagger-ui.html

1. /notLogged/signin(@RequestBody JwtRequest) -> return JWT token after successful login or return 401/500 error.
    500 error (BAD REQUEST) gone with JSON object:
    {
        field_name: what was invalid in this field,
        ....
    }

2. /createEvent(@RequestBody ObjHolder objHolder) -> returns response 200 after succesfull event insert.
   informacje dokładne co do objHolder na trello

3. /event/fetchDay?day={day} -> zwraca wszystkie eventy z danego dnia w postaci ResponseEventDTO
    day -> String w postaci yyyy-MM-dd, jako requestParam
    userEmail -> w requestBody jako string, nazwa username. username == empty, kiedy req jest przed zalogowaniem

    ResponseEventDTO -> {
         id: int, // id obiektu TimeEvent, ale z TimeEvent możemy wyciągnąć Event ofc
         organizationName: String;
         eventName: String;
         tags: String;
         language: String;
         dateS: LocalDateTime (w postaci yyyy-MM-dd);
         dateF: LocalDateTime (w postaci yyyy-MM-dd);
         timeEventId: id;
         ifSaved: boolean (czy jest zapisany w zakładce z zapisanymi przez danego użytkownika czy nie)
    }

4.Delete ->  /deleteSavedEvent" (@RequestBody Object), Object w postaci:
     {
         "userEmail": string, -> email aktualnie zalogowanego usera
         "id": int -> id wydarzenia które ma zostać usunięte z zapisanych dla konkretnego usera
     }

5.Put ->  /saveEventForUser" (@RequestBody Object), Object w postaci:
        {
            "userEmail": string, -> email aktualnie zalogowanego usera
            "id": int -> id wydarzenia które ma zostać dodane do zapisanych dla konkretnego usera
        }

6.Get -> /event/fetchPast -> zwraca wszystkie zakończone eventy danego użytkownika (lub te trawjące, ale już rozpoczęte)
	 w postaci ResponseEventDTO (format jak w punkcie 3)
	 userEmail -> w requestBody jako string, nazwa username. Bez tworzenia obiektu, tylko sam String. Identyfikuje użykownika.

7.Get -> /event/fetchFuture -> zwraca wszystkie przyszłe eventy danego użytkownika w postaci ResponseEventDTO (format jak w punkcie 3)
	 userEmail -> w requestBody jako string, nazwa username. Bez tworzenia obiektu, tylko sam String. Identyfikuje użykownika.

8. Get -> /fetchEvent/{id} -> zwraca szczegóły danego wydarzenia, id to id obiektu TimeEvent.
    W odpowiedzi dostajemy obiekt w postaci:
    {
        "name": string,
        "description": string,
        "daysOfWeek": string w postaci -> "mo,fr"
        "cyclical": boolean,
        "mode": string,
        "webAddress": string,
        "tags": string,
        "language": string,
        "dateS":  string -> sama data "2021-04-12",
        "dateF":  string -> sam data "2021-04-12",
        "timeS": string ->  sam czas
        "timeF": string ->  sam czas "18:00",
        "orgName": string,
        "orgLogo": string,
        "orgEmail": string,
        "orgWeb": string
    }

9. /notLogged/fetchEvent/{id} - > zwraca to samo co w punkcie 8, ale z miejscu webAddress jest pusty string. Req nie zabezpieczony.

10. /notLogged/registerv(@RequestBody UserDTO userDTO) -> rejestruje użytkownika. Zwraca response 200 przy poprawnym zapisaniu do bazy.

    Przyjmuje UserDTO w postaci:

    {
        "name":String,
        "email":String,
        "pwd":String,
        "roleName": String -> Role na ten moment: User, Organizer, Admin, GlobalAdmin
    }

11. /notLogged/fetchOrganization?id={id} -> zwraca informacje o organizacji pod danym id.
    Pzyjmuje:
                id -> int w postaci requestParam.

    Zwraca organizacje w postaci:
    FullOrgResponseDTO -> {
             "name": String,
    	     "country": String,
    	     "province": String,
             "city": String,
             "postalCode": String,
             "street": String,
             "nip": String,
             "phoneNumber": String,
             "email": String,
             "webPage": String,
             "photo": String
        }
12. /notLogged/table/fetchOrganizations -> zwraca informacje do tabelki z organizacjami

    ResponseOrgDTO {

            {
            "id": int
            "name": String,
            "photo": String,
            "city": String,
            "province": String
            "country": "String

    }


